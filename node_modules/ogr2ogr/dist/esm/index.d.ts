/// <reference types="node" />
import { Readable, Stream } from "stream";
declare type JSONLike = Record<string, unknown>;
declare type Input = string | JSONLike | Stream;
interface Result {
    cmd: string;
    text: string;
    data?: JSONLike;
    stream?: Readable;
    extname?: string;
    details: string;
}
declare type Callback = (err: Error | null, res?: Result) => void;
interface Options {
    command?: string;
    format?: string;
    options?: string[];
    destination?: string;
    env?: Record<string, string>;
    timeout?: number;
    maxBuffer?: number;
}
declare class Ogr2ogr implements PromiseLike<Result> {
    private inputStream?;
    private inputPath;
    private outputPath;
    private outputFormat;
    private outputExt;
    private customCommand?;
    private customOptions?;
    private customDestination?;
    private customEnv?;
    private timeout;
    private maxBuffer;
    constructor(input: Input, opts?: Options);
    exec(cb: Callback): void;
    then<TResult1 = Result, TResult2 = never>(onfulfilled?: (value: Result) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: string) => TResult2 | PromiseLike<TResult2>): PromiseLike<TResult1 | TResult2>;
    private newInputPath;
    private newOutputPath;
    private createZipStream;
    private run;
}
export default function ogr2ogr(input: Input, opts?: Options): Ogr2ogr;
export {};
